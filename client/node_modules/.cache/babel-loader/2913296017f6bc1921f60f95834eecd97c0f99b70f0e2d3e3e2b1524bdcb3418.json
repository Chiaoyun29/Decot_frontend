{"ast":null,"code":"const API_URL = 'http://localhost:5000';\nexport const registerUser = async (username, email, password) => {\n  try {\n    const response = await fetch(`${API_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        email,\n        password\n      })\n    });\n    if (!response.ok) {\n      const data = await response.json();\n      // `data.errors` is an array of validation error messages\n      // You might show these messages to the user in some way\n      // throw new Error(data.errors.map(error => error.msg).join('\\n'));\n    }\n\n    return response;\n  } catch (error) {\n    throw new Error('React: Failed to register user');\n  }\n};\nexport const loginUser = async (email, password) => {\n  try {\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!response.ok) {\n      const data = await response.json();\n      // `data.errors` is an array of validation error messages\n      // You might show these messages to the user in some way\n      throw new Error(data.errors.map(error => error.msg).join('\\n'));\n    }\n    return response;\n  } catch (error) {\n    throw new Error('React:Failed to login');\n  }\n};","map":{"version":3,"names":["API_URL","registerUser","username","email","password","response","fetch","method","headers","body","JSON","stringify","ok","data","json","error","Error","loginUser","errors","map","msg","join"],"sources":["C:/Users/USER/Desktop/decot/client/src/components/services/api.js"],"sourcesContent":["const API_URL = 'http://localhost:5000';\r\n\r\nexport const registerUser = async (username, email, password) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/auth/register`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ username, email, password }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const data = await response.json();\r\n      // `data.errors` is an array of validation error messages\r\n      // You might show these messages to the user in some way\r\n      // throw new Error(data.errors.map(error => error.msg).join('\\n'));\r\n    }\r\n\r\n    return response;\r\n  } catch (error) {\r\n    throw new Error('React: Failed to register user');\r\n  }\r\n};\r\n\r\nexport const loginUser = async (email, password) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/auth/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n    if (!response.ok) {\r\n      const data = await response.json();\r\n      // `data.errors` is an array of validation error messages\r\n      // You might show these messages to the user in some way\r\n      throw new Error(data.errors.map(error => error.msg).join('\\n'));\r\n    }\r\n    return response;\r\n  } catch (error) {\r\n    throw new Error('React:Failed to login');\r\n  }\r\n};"],"mappings":"AAAA,MAAMA,OAAO,GAAG,uBAAuB;AAEvC,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,KAAK;EAC/D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,OAAQ,gBAAe,EAAE;MACvDO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAET,QAAQ;QAAEC,KAAK;QAAEC;MAAS,CAAC;IACpD,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClC;MACA;MACA;IACF;;IAEA,OAAOT,QAAQ;EACjB,CAAC,CAAC,OAAOU,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;EACnD;AACF,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOd,KAAK,EAAEC,QAAQ,KAAK;EAClD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,OAAQ,aAAY,EAAE;MACpDO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC;MAAS,CAAC;IAC1C,CAAC,CAAC;IACF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClC;MACA;MACA,MAAM,IAAIE,KAAK,CAACH,IAAI,CAACK,MAAM,CAACC,GAAG,CAACJ,KAAK,IAAIA,KAAK,CAACK,GAAG,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjE;IACA,OAAOhB,QAAQ;EACjB,CAAC,CAAC,OAAOU,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC1C;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}